#pragma once

/* Generated with cbindgen:0.14.2 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define PB_ERROR -1

#define PB_SUCCESS 0

/**
 * A Client Instance.
 *
 * Used for Communication between Client Entities and RPU Servers.
 *
 * # Example
 *
 * ```no_run
 * use pinxit::Identity;
 * use prellblock_client::Client;
 *
 * # async fn test() {
 * let identity: Identity = "03d738c972f37a6fd9b33278ac0c50236e45637bcd5aeee82d8323655257d256"
 *     .parse()
 *     .unwrap();
 * let mut client = Client::new("10.10.10.10:2480".parse().unwrap(), identity);
 * client
 *     .send_key_value("key".to_string(), "value")
 *     .await
 *     .unwrap();
 * # }
 * ```
 */
typedef struct PB_Client PB_Client;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Create a new `Client` for sending requests to RPUs.
 */
int pb_client_create(const char *address, const char *identity_hex, PB_Client **client);

/**
 * Free the memory for the `Client`.
 */
void pb_client_free(PB_Client *client);

/**
 * Send a Key-Value transaction via the client.
 */
int pb_client_send_key_value(PB_Client *client, const char *key, const char *value);

/**
 * Get the last error message of the prellblock client.
 *
 * Returns a thread local reference to the last error message.
 */
const char *pb_last_error(void);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
