#pragma once

/* Generated with cbindgen:0.14.2 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <new>

namespace prellblock {

/**
 * A Client Instance.
 *
 * Used for Communication between Client Entities and RPU Servers.
 *
 * # Example
 *
 * ```no_run
 * use pinxit::Identity;
 * use prellblock_client::Client;
 *
 * # async fn test() {
 * let identity: Identity = "03d738c972f37a6fd9b33278ac0c50236e45637bcd5aeee82d8323655257d256"
 *     .parse()
 *     .unwrap();
 * let mut client = Client::new("10.10.10.10:2480".parse().unwrap(), identity);
 * client
 *     .send_key_value("key".to_string(), "value")
 *     .await
 *     .unwrap();
 * # }
 * ```
 */
struct Client;


extern "C" {

/**
 * Create a new `Client` for sending requests to RPUs.
 */
Client *create_client_instance(const char *address, const char *identity_hex);

/**
 * Free the memory for the `Client`.
 */
void destroy_client_instance(Client *client);

/**
 * Send a Key-Value transaction via the client.
 */
void send_key_value(Client *client, const char *key, const char *value);

} // extern "C"

} // namespace prellblock
